# ------------------------------------------
# Dein.vim Plugin Management (LAZY)
# ------------------------------------------

# [[plugins]]
# repo = 'Shougo/vimshell'
# depends = ['vimproc.vim']
# on_cmd = ['VimShellExecute', 'VimShellInteractive', 'VimShellTerminal', 'VimShellPop']
# on_map = ['<Plug>(vimshell_switch)']

[[plugins]]
repo = 'Shougo/vimfiler'
depends = ['unite.vim']
on_cmd =  ['VimFilerTab', 'VimFiler', 'VimFilerExplorer', 'VimFilerBufferDir']
on_map = ['<Plug>(vimfiler_switch)']
hook_add = '''
  nnoremap <F2> :VimFiler -buffer-name=explorer -split -winwidth=30 -toggle -auto-cd -no-quit -simple<Cr>
  function! s:my_vimfiler_settings()
    nmap     <buffer><expr><Cr> vimfiler#smart_cursor_map("\<Plug>(vimfiler_expand_tree)", "\<Plug>(vimfiler_edit_file)")
  endfunction
  autocmd! FileType vimfiler call s:my_vimfiler_settings()
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_safe_mode_by_default = 0
  let g:vimfiler_edit_action = 'tabopen'
  let g:vimfiler_force_overwrite_statusline = 0
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['neomru.vim', 'vimproc.vim']
on_cmd =  ['Unite', 'UniteWithBufferDir', 'UniteWithCurrentDir']
hook_add = '''
  nnoremap    [unite]   <Nop>
  nmap    <Leader>f [unite]
  nnoremap [unite]u  :<C-u>Unite -no-split<Space>
  nnoremap <silent> [unite]f :<C-u>Unite<Space>buffer<CR>
  nnoremap <silent> [unite]b :<C-u>Unite<Space>bookmark<CR>
  nnoremap <silent> [unite]m :<C-u>Unite<Space>file_mru<CR>
  nnoremap <silent> [unite]r :<C-u>UniteWithBufferDir file<CR>
  nnoremap <silent> ,vr :UniteResume<CR>"
  let g:unite_force_overwrite_statusline = 0
'''

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
  call ddc#custom#patch_global('sources', ['neosnippet', 'around', 'file', 'buffer'])
	call ddc#custom#patch_global('sourceOptions', {
	    \ '_': {
	    \   'matchers': ['matcher_head'],
	    \   'sorters': ['sorter_rank'],
      \   'converters': ['converter_remove_overlap'],
	    \ },
	    \ 'neosnippet': {'mark': 'ns', 'dup': v:true},
      \ 'around': {'mark': 'A'},
      \ 'file': {'mark': 'F', 'isVolatile': v:true, 'forceCompletionPattern': '\S/\S*'},
      \ 'buffer': {'mark': 'B'},
	    \ })

  call ddc#custom#patch_global('sourceParams', {
      \ 'around': {'maxSize': 500},
      \ 'buffer': {
      \   'requireSameFiletype': v:false,
      \   'limitBytes': 5000000,
      \   'fromAltBuf': v:true,
      \   'forceCollect': v:true,
      \ },
      \ })

  inoremap <silent><expr> <TAB>
      \ ddc#map#pum_visible() ? '<C-n>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
  inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'

  call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_source = 'ddc.vim'
hook_post_source = '''
  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: pumvisible() ? "\<C-n>" : "\<TAB>"
  smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
  \ "\<Plug>(neosnippet_expand_or_jump)"
  \: "\<TAB>"

  let g:neosnippet#data_directory     = expand('~/.vim/etc/.cache/neosnippet')
  let g:neosnippet#snippets_directory = [expand('~/.vim/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets'),expand('~/.vim/snippets')]
'''


# [[plugins]]
# repo = 'Shougo/neocomplete'
# if = "has('lua')"
# on_i = 1
# hook_add = '''
#   let g:neocomplete#enable_at_startup = 1
#   let g:neocomplete#enable_ignore_case = 1
#   let g:neocomplete#enable_smart_case = 1
#   let g:neocomplete#enable_underbar_completion = 1
#   let g:neocomplete#min_syntax_length = 3
#   let g:neocomplete#auto_completion_start_length = 3
#   let g:neocomplete#enable_camel_case_completion = 1
#   let g:neocomplete#enable_quick_match = 1
#   let g:neocomplete#force_overwrite_completefunc = 1
#   let g:neocomplete#enable_auto_select = 1
# '''
# 
# [[plugins]]
# repo = 'Shougo/neocomplcache'
# if = "!has('lua')"
# on_i = 1
# hook_add = '''
#   let g:neocomplcache_enable_at_startup = 1
#   let g:neocomplcache_enable_ignore_case = 1
#   let g:neocomplcache_enable_smart_case = 1
#   let g:neocomplcache_enable_underbar_completion = 1
#   let g:neocomplcache_min_syntax_length = 3
#   let g:neocomplcache_auto_completion_start_length = 3
#   let g:neocomplcache_enable_camel_case_completion = 1
#   let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
#   let g:neocomplcache_enable_quick_match = 1
#   let g:neocomplcache_enable_auto_select = 1
# '''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'

[[plugins]]
repo = 'vim-syntastic/syntastic'
on_i = 1
hook_post_source = '''
  let g:syntastic_tex_checkers=['']
  let g:syntastic_disabled_filetypes=['tex']
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd =  'QuickRun'
on_map = ['<Plug>(quickrun)']
hook_post_source = '''
  nnoremap <expr><silent> <C-c> quickrun#is_running( ? quickrun#sweep_sessions( : "\<C-c>"))
  let g:quickrun_config = {
  \ 'tex' : {
  \   'command' : 'latexmk',
  \	'cmdopt' : '-pdfdvi',
  \   'exec': ['%c %o %s']}
  \ }
  let g:quickrun_config['_'] = {
  \   'runner' : 'vimproc.vim',
  \   'runner/vimproc/updatetime' : 60,
  \}
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = 'tex'
hook_add = '''
  let g:vimtex_compiler_enabled = 1
  let g:tex_flavor='latex'
  autocmd FileType tex setlocal foldtext<
  let g:vimtex_view_method = 'skim'
  let g:vimtex_view_skim_activate = 1
  let g:vimtex_view_skim_sync = 1
  let g:vimtex_fold_types = {}
  let g:vimtex_fold_enabled = 1
  let g:vimtex_fold_manual = 1
  let g:vimtex_quickfix_mode = 0
  let g:vimtex_compiler_latexmk_engines = { '_' : '-pdfdvi' }
  let g:vimtex_compiler_latexmk = {
              \ 'background' : 1,
              \ 'build_dir' : '',
              \ 'callback' : 1,
              \ 'continuous' : 1,
              \ 'options' : [
              \   '-pdfdvi',
              \   '-verbose',
              \   '-file-line-error',
              \   '-synctex=1',
              \   '-interaction=nonstopmode',
              \ ],
              \}
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Gstatus', 'Gcommit', 'Gwrite', 'Gdiff', 'Gblame', 'Git', 'Ggrep']
hook_post_source = '''
  command Ga Gwrite
  command Gc Gcommit
'''

[[plugins]]
repo = 'gregsexton/gitv'
depends = ['vim-fugitive']
on_cmd = 'Gitv' 

# referenceç³»
[[plugins]]
repo = 'vim-ruby/vim-ruby'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'taka84u9/vim-ref-ri'
depends = ['unite.vim', 'vim-ref']

[[plugins]]
repo = 'skwp/vim-rspec'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'vim-scripts/ruby-matchit'
on_ft = ['ruby', 'eruby', 'haml']

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'vim-scripts/taglist.vim'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'xhtml', 'php', 'css', 'xml', 'xls', 'markdown', 'erb']

